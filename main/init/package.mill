package build.main.init

import mill._

object `package` extends RootModule with build.MillPublishScalaModule {

  def moduleDeps = Seq(build.main, build.main.init.buildgen, build.scalalib)

  override def resources = Task {
    super.resources() ++ Seq(exampleList())
  }

  def exampleList: T[PathRef] = Task {
    val data: Seq[(os.SubPath, String)] =
      build.dist.examplePathsWithArtifactName().map { case (path, str) =>
        val downloadUrl = s"${build.millDownloadUrl()}/$str.zip"
        val subPath = path.subRelativeTo(Task.workspace / "example")
        (subPath, downloadUrl)
      }

    val libsSortOrder = List(
      "scalalib",
      "javalib",
      "kotlinlib",
      "extending",
      "external",
      "thirdparty",
      "depth"
    )

    val categoriesSortOrder = List("basic", "builds", "web")

    def sortCriterium(strOpt: Option[String], sortOrderList: List[String]): Int =
      strOpt
        .flatMap { str =>
          val idx = sortOrderList.indexOf(str)
          Option.when(idx >= 0)(idx)
        }
        .getOrElse(Int.MaxValue)

    val sortedData = data.sortBy { case (p1, _) =>
      val segmentsReversed = p1.segments.reverse.lift
      val libOpt = segmentsReversed(2)
      val categoryOpt = segmentsReversed(1)
      val nameOpt = segmentsReversed(0)

      val libSortCriterium = sortCriterium(libOpt, libsSortOrder)
      val categorySortCriterium = sortCriterium(categoryOpt, categoriesSortOrder)
      val nameSortCriterium = nameOpt
        .flatMap(_.takeWhile(_.isDigit).toIntOption)
        .getOrElse(Int.MinValue)

      (libSortCriterium, libOpt, categorySortCriterium, categoryOpt, nameSortCriterium, nameOpt)
    }

    os.write(
      Task.dest / "exampleList.txt",
      upickle.default.write(sortedData.map { case (p, s) => (p.toString(), s) })
    )

    PathRef(Task.dest)
  }

  object buildgen extends build.MillPublishScalaModule {
    def moduleDeps = Seq(build.runner /*, tree(build.Deps.scalaVersion)*/ )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib)

    // I tried moving `Tree` into this module, but it doesn't compile with Scala 2.12.20.
    /*
    object tree extends Cross[TreeModule](build.Deps.sbtScalaVersion212, build.Deps.scalaVersion)
    trait TreeModule extends build.MillPublishCrossScalaModule {
      def ivyDeps = Agg(build.Deps.upickle)
    }
     */
  }
  object gradle extends build.MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def ivyDeps = Agg(
      build.Deps.gradleApi,
      build.Deps.logback
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib, buildgen.test)
  }
  object maven extends build.MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def ivyDeps = Agg(
      build.Deps.mavenEmbedder,
      build.Deps.mavenResolverConnectorBasic,
      build.Deps.mavenResolverSupplier,
      build.Deps.mavenResolverTransportFile,
      build.Deps.mavenResolverTransportHttp,
      build.Deps.mavenResolverTransportWagon
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib, buildgen.test)
  }

  object sbt extends build.MillPublishScalaModule {
    def moduleDeps = Seq(buildgen, models(build.Deps.scalaVersion))

    val sbtPluginProjectPath = millModuleBasePath.value / "sbt-mill-init-export-build"

    def sbtPluginProjectSource = Task.Source { sbtPluginProjectPath }

    // generateSbtPluginJar
    def sbtPluginJarResources = Task {
      models(build.Deps.sbtScalaVersion212).publishLocal()()

      sbtPluginProjectSource()

      val version = build.millVersion()
      if (
        os.call(
          // The version is passed to the sbt build so it correctly resolves the "models" dependency version and sets its own version.
          ("sbt", s"""set version := "$version"""", "assembly"),
          cwd = sbtPluginProjectPath
        ).exitCode != 0
      )
        throw new RuntimeException(
          "Failed to run `sbt assembly` in the \"sbt-mill-init-export-build\" sbt project. " +
            "Check if the project builds correctly and if you have sbt available on your system, and install it if you don't."
        )

      os.copy(
        sbtPluginProjectPath / "target" / "scala-2.12" / "sbt-1.0" / s"sbt-mill-init-export-build-assembly-$version.jar",
        Task.dest / "sbt-mill-init-export-build-assembly.jar"
      )
      PathRef(Task.dest)
    }
    def resources: T[Seq[PathRef]] =
      Task.Sources(super.resources() ++ Seq(sbtPluginJarResources()))
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib, buildgen.test)

    // An SBT plugin is built with Scala 2.12. See https://www.scala-sbt.org/1.x/docs/Plugins.html#Creating+an+auto+plugin.
    object models
        extends Cross[ModelsModule](build.Deps.sbtScalaVersion212, build.Deps.scalaVersion)
    trait ModelsModule extends build.MillPublishCrossScalaModule {
      // def moduleDeps = Seq(buildgen.tree())
      def ivyDeps = Agg(build.Deps.upickle)
      def compileIvyDeps = Agg(build.Deps.sbt) // for definition references only
    }
  }
}
